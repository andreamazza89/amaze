type Query {
    myMaze(mazeId: ID!): MazeInfo!
}

type Mutation {
    createAMaze(mazeRunner: String!): ID!
    takeAStep(mazeId: ID!, stepDirection: Direction!): StepResult!
    saySomething(message: String!): String
}

type Subscription {
    tellMeSeconds: Int!
    tellMeWhatOthersSay: String
}

type MazeInfo {
    maze: Maze!,
    yourPosition: Position!
}

type Maze {
    rows: Int!
}

type Position {
    x: Int!
    y: Int!
}

enum Direction {
    UP
    RIGHT
    DOWN
    LEFT
}

union StepResult = MazeDoesNotExist | HitAWall | NewPosition

type MazeDoesNotExist {
    message: String!
}

type HitAWall {
    message: String!
}

type NewPosition {
    position: Position!
}
