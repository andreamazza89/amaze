type Query {
    myMaze(mazeId: ID!): MazeInfo!
}

type Mutation {
    startAGame: ID!
    addAPlayerToAGame(gameId: ID!): AddAPlayerResponse!
    createAMaze(mazeRunner: String!): ID!
    takeAStep(mazeId: ID!, stepDirection: Direction!): StepResult!
    takeAStep2(gameId: ID!, playerName: String!, stepDirection: Direction!): StepResult!
}

union AddAPlayerResponse = Success | Failure

type Success {
    message: String
}

type Failure {
    message: String
}

type Subscription {
    allMazes: [MazeInfo!]!
}

type MazeInfo {
    maze: Maze!,
    yourPosition: Position!
}

type Maze {
    cells: [Cell!]!
}

union Cell = Wall | Floor

type Wall {
    position: Position!
}

type Floor {
    position: Position!
}

type Position {
    x: Int!
    y: Int!
}

enum Direction {
    UP
    RIGHT
    DOWN
    LEFT
}

union StepResult = MazeDoesNotExist | HitAWall | NewPosition

type MazeDoesNotExist {
    message: String!
}

type HitAWall {
    message: String!
}

type NewPosition {
    position: Position!
}
