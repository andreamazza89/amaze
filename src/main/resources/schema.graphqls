type Query {
    gameStatus(gameId: ID!): GameStatus!
    gamesAvailable: [ID!]!
    playerStatus(gameId: ID!, playerName: String!): PlayerStatusResponse!
    sampleQuery: SampleType!
}

type SampleType {
    aString: String!
    anotherString: String!
    aNestedThing: AThing!
    aListOfThings: [AThing!]!
}

type AThing {
    theAnswer: Int
}

type Mutation {
    startAGame: ID!
    addAPlayerToAGame(gameId: ID!, playerName: String!): AddAPlayerResponse!
    takeAStep(gameId: ID!, playerName: String!, stepDirection: Direction!, token: ID!): StepResult!
}

type Subscription {
    gameStatus(gameId: ID!): GameStatus!
}

union AddAPlayerResponse = Success | Failure

type Success {
    token: ID!
}

type Failure {
    message: String
}

union PlayerStatusResponse = GotOut | StillIn | Failure

type GotOut {
    message: String
}

type StillIn {
    directionsAvailable: [Direction!]!
}

type GameInfo {
    maze: Maze!,
    yourPosition: Position!
}

type GameStatus {
    maze: Maze!,
    playersPositions: [PlayerPosition!]!
}

type PlayerPosition {
    playerName: String!
    position: Position!
}

type MazeInfo {
    maze: Maze!,
    yourPosition: Position!
}

type Maze {
    cells: [Cell!]!
}

union Cell = Wall | Floor

type Wall {
    position: Position!
}

type Floor {
    position: Position!
}

type Position {
    x: Int!
    y: Int!
}

enum Direction {
    NORTH
    EAST
    SOUTH
    WEST
}

union StepResult = GameDoesNotExist | HitAWall | PlayerNotInThisGame | PlayerGotOut | TokenIsNotValid | NewPosition

type GameDoesNotExist {
    message: String!
}

type HitAWall {
    message: String!
}

type PlayerNotInThisGame {
    message: String!
}

type PlayerGotOut {
    message: String!
}

type TokenIsNotValid {
    message: String!
}

type NewPosition {
    position: Position!
}
